import struct
import re

FRAME_COUNT = 318
DEFAULT_DELAY = 100

delay_data = """
frames 1, 5, 26, 82-83, 172: 70ms
frames 2, 6, 20, 165: 60ms
frames 3, 24: 170ms
frames 4, 25, 175: 100ms
frames 7, 10, 13, 16, 19, 21, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 164, 167, 170, 176, 179, 182, 185, 188, 191, 194, 197, 200, 203, 206, 209, 212, 215, 218, 221, 224, 227, 230, 233, 236, 239, 242, 245, 248, 251, 254, 257, 260, 263, 266, 269, 272, 275, 278, 281, 284, 287, 290, 293, 296, 299, 302, 305, 308, 311, 314, 317: 40ms
frames 8-9, 11-12, 14-15, 17-18, 22-23, 27-28, 30-31, 33-34, 36-37, 39-40, 42-43, 45-46, 48-49, 51-52, 54-55, 57-58, 60-61, 63-64, 66-67, 69-70, 72-73, 75-76, 78-79, 87-88, 90-91, 93-94, 96-97, 99-100, 102-103, 105-106, 108-109, 111-112, 114-115, 117-118, 120-121, 123-124, 126-127, 129-130, 132-133, 135-136, 138-139, 141-142, 144-145, 147-148, 150-151, 153-154, 156-157, 159-160, 163, 168-169, 171, 173-174, 177-178, 180-181, 183-184, 186-187, 189-190, 192-193, 195-196, 198-199, 201-202, 204-205, 207-208, 210-211, 213-214, 216-217, 219-220, 222-223, 225-226, 228-229, 231-232, 234-235, 237-238, 240-241, 243-244, 246-247, 249-250, 252-253, 255-256, 258-259, 261-262, 264-265, 267-268, 270-271, 273-274, 276-277, 279-280, 282-283, 285-286, 288-289, 291-292, 294-295, 297-298, 300-301, 303-304, 306-307, 309-310, 312-313, 315-316: 30ms
frame 81: 160ms
frames 84, 166: 200ms
frame 85: 260ms
frames 161, 318: 140ms
frame 162: 230ms
"""

delays = [DEFAULT_DELAY] * FRAME_COUNT

for line in delay_data.strip().splitlines():

    delay_match = re.search(r":\s*(\d+)ms", line)
    if not delay_match:
        continue
    delay_value = int(delay_match.group(1))

    frames_part = line.split(":")[0]
    frame_tokens = re.findall(r"(\d+(?:-\d+)?)", frames_part)

    for token in frame_tokens:
        if "-" in token:
            start, end = map(int, token.split("-"))
            for f in range(start, end + 1):
                if 1 <= f <= FRAME_COUNT:
                    delays[f - 1] = delay_value
        else:
            f = int(token)
            if 1 <= f <= FRAME_COUNT:
                delays[f - 1] = delay_value

with open("dcat.bin", "wb") as f:
    for d in delays:
        f.write(struct.pack("<H", d))

print(f"Generated dcat.bin with {FRAME_COUNT} entries")